use clap::{Command, arg, Arg, ArgAction};

pub fn get_args() -> clap::Command {

    clap::Command::new("bpm-pack")
        .version("0.1.0")
        .about("Bryan's Package Manager : bpm-pack : package creation utility")
        .author("Bryan Splitgerber")
        .disable_version_flag(true)
        .subcommand_negates_reqs(true)
        .args_conflicts_with_subcommands(true)
        .after_help("With no <COMMAND>, build a package.")
        .subcommand(
            Command::new("set-version")
                .about("Take an unversioned package and built a new package that is versioned")
                .arg(arg!(<pkgfile> "package file to version"))
                .arg(arg!(--version <version> "The package's version")
                    .required(true)
                )
                .arg(arg!(--semver "Require the version to be a valid semver [see http://semver.org]"))
        )
        .subcommand(
            Command::new("list")
                .alias("list-files")
                .about("list files of a package")
                .arg(arg!(<pkgfile> "package file to inspect"))
        )
        .subcommand(
            Command::new("test-ignore")
                .about("test an ignore file, output which files would be added or ignored")
                .arg(arg!(<file>... "files to include in the package"))
                .arg(arg!(-v --verbose "be verbose"))
                .arg(arg!(--"wrap-with-dir" <dirname> "Wrap all files into one root dir"))
                .arg(arg!(--pattern <pattern> "Test the given pattern against the give files")
                    .action(ArgAction::Append)
                )
                .arg(
                    Arg::new("ignore-file")
                        .long("ignore-file")
                        .value_hint(clap::ValueHint::FilePath)
                        .action(ArgAction::Append)
                        .value_name("path")
                        .required(false)
                )
        )
        .arg(arg!(<file>... "files to include in the package"))
        .arg(arg!(-n --name <name> "The name of the package")
            .required(true)
        )
        .arg(arg!(--version <version> "The package's version")
            .required(true)
        )
        .arg(arg!(--unversioned "Build a package without a version. The package will be invalid until versioned later.")
            .conflicts_with("version")
        )
        .arg(arg!(--mount <mount> "The packages mount point, where to install into")
            .required(true)
        )
        .arg(
            Arg::new("ignore-file")
                .long("ignore-file")
                .help("Use an ignore file to exclude or include files")
                .value_hint(clap::ValueHint::FilePath)
                .value_name("path")
                .action(ArgAction::Append)
                .required(false)
        )
        .arg(
            Arg::new("output-dir")
                .long("output-dir")
                .short('o')
                .value_name("dir")
                .required(false)
                .help("directory to put the built package file")
        )
        .arg(arg!(--"wrap-with-dir" <dirname> "Wrap all files into one root dir"))
        .arg(arg!(--semver "Require the version to be a valid semver [see http://semver.org]"))
        .arg(arg!(--"allow-symlink-dne" "Allow symlinks to files that do not exist"))
        .arg(arg!(--"allow-symlink-outside" "Allow symlinks to files outside the package"))
        .arg(arg!(--verbose))
        .arg(arg!(--"no-cleanup" "do not remove intermediate files"))
        .arg(
            Arg::new("compress-level")
                .short('c')
                .value_name("level")
                .default_value("0")
                .required(false)
                .help("compression level")
                .value_parser(clap::value_parser!(u32))
        )
        .arg(
            Arg::new("depend")
                .long("depend")
                .action(clap::ArgAction::Append)
                .value_name("pkg[@version]")
                .help("Add a dependency")
        )
}
